## Estrutura de Diretórios

A estrutura de diretórios do projeto é organizada da seguinte maneira:

```
A2/
|-- backend/
|   |-- app.py
|   |-- templates/
|   |   |-- login.html
|   |   |-- newNote.html
|   |   |-- notes.html
|   |-- dockerfile
|   |-- requirements.txt
|-- database/
|   |-- criaTabelas.sql
|-- docker-compose.yml
|-- README.md
```

### Descrição das Pastas e Arquivos

- `A2/`: Diretório raiz do projeto.
  - `backend/`: Diretório contendo o código-fonte do backend Flask.
    - `app.py`: Arquivo principal do aplicativo Flask, que gerencia as rotas e a lógica da aplicação.
    - `templates/`: Diretório contendo os templates HTML utilizados para renderizar as páginas web.
      - `login.html`: Página de login.
      - `newNote.html`: Página para adicionar novas notas.
      - `notes.html`: Página para visualizar notas existentes.
    - `dockerfile`: Arquivo de configuração Docker para criar o contêiner do backend.
    - `requirements.txt`: Arquivo listando as dependências Python do aplicativo.
  - `database/`: Diretório contendo scripts relacionados ao banco de dados.
    - `criaTabelas.sql`: Script SQL para criar tabelas no banco de dados.
  - `docker-compose.yml`: Arquivo de configuração Docker Compose que define os serviços.
  - `README.md`: Este arquivo README.

## Instruções para Lançar a Aplicação

Siga as etapas abaixo para lançar a aplicação:

1. Certifique-se de que você tenha o Docker e o Docker Compose instalados no seu sistema.
2. Clone este repositório para o seu ambiente local.
3. Abra o terminal no diretório do projeto.
4. Execute o seguinte comando para criar e iniciar os containers:

   ```bash
   docker-compose up --build
   ```

5. Isso iniciará os containers do Flask, PostgreSQL e Adminer (interface para o banco de dados) definidos no `docker-compose.yml`.

## Instruções para Acesso ao Administrador do Banco de Dados

1. Abra o navegador e acesse `http://localhost:8080` para acessar o Adminer, uma interface web para gerenciamento de bancos de dados.
2. Faça login no Adminer com as seguintes informações:
   - Sistema: PostgreSQL
   - Servidor: db
   - Nome de Usuário: postgres
   - Senha: senha
   - Banco de Dados: postgres

## Configuração Inicial do Banco de Dados

Se as tabelas não estiverem criadas automaticamente, siga essas etapas para criar as tabelas:

1. No Adminer, após fazer login, você verá a opção de "SQL command".
2. Clique nessa opção e copie o conteúdo do arquivo `criaTabelas.sql`.
3. Cole o conteúdo no campo de execução SQL e execute o comando para criar as tabelas.

## Inserção de Usuário Inicial

Se desejar inserir um usuário inicial no banco de dados:

1. Na página "SQL command" do Adminer, copie e cole o seguinte comando SQL:

   ```sql
   INSERT INTO "user" (username, password) VALUES ('seu_usuario', 'sua_senha');
   ```

2. Substitua `'seu_usuario'` pelo nome de usuário desejado e `'sua_senha'` pela senha desejada.
3. Execute o comando para inserir o usuário no banco de dados.

## Instruções para Utilizar a Aplicação

Após lançar a aplicação com sucesso e configurar o banco de dados, siga estas instruções para utilizá-la:

1. Acesse a aplicação no seu navegador em `http://localhost:80/loginPage`. Você será direcionado para a página de login.
2. Faça login com o usuário que você inseriu.
3. Após o login, você será redirecionado para a página de visualização das notas.
4. Clique no botão "Nova Nota" para adicionar uma nova nota. Preencha os campos obrigatórios e clique em "Salvar".

## Arquitetura da Aplicação

A solução é composta por dois containers Docker: um para o backend Flask e outro para o banco de dados PostgreSQL. Além disso, a interface de front-end é criada com HTML e CSS. A escolha dessa arquitetura se baseia na familiaridade e agilidade no desenvolvimento com essas ferramentas.

### Containers:

- Backend: O backend é desenvolvido em Flask, um framework web em Python. Ele gerencia as rotas da aplicação, a conexão com o banco de dados e as interações com o usuário.

- Banco de Dados: O banco de dados PostgreSQL é usado para armazenar as informações do usuario e suas notas.

### Estrutura do Banco de Dados:

#### Tabela "user":

- id (integer): Chave primária auto-incremental que identifica exclusivamente cada usuário.

- username (text): Nome de usuário.

- password (text): Senha do usuário.

#### Tabela "notes":

- id (integer): Chave primária auto-incremental que identifica exclusivamente cada nota.

- title (text): Título da nota.

- content (text): Conteúdo da nota.

- to_do_date (date): Data associada à nota.

- user_id (integer): Chave estrangeira que relaciona a nota ao usuário que a criou.